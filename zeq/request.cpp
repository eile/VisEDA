// Generated by zerobufCxx.py
#include "request.h"
#include <zerobuf/jsoncpp/json/json.h>
#include <iostream>

namespace zeq
{
namespace vocabulary
{
template< class Alloc >
uint64_t RequestBase< Alloc >::getEventLow() const
{
    return getAllocator()->template getItem< uint64_t >( 4 );
}

template< class Alloc >
void RequestBase< Alloc >::setEventLow( uint64_t value )
{
    getAllocator()->template getItem< uint64_t >( 4 ) = value;
}


template< class Alloc >
uint64_t RequestBase< Alloc >::getEventHigh() const
{
    return getAllocator()->template getItem< uint64_t >( 12 );
}

template< class Alloc >
void RequestBase< Alloc >::setEventHigh( uint64_t value )
{
    getAllocator()->template getItem< uint64_t >( 12 ) = value;
}


template< class Alloc >
bool RequestBase< Alloc >::readJSON( const std::string& json )
{
    Json::Value dict;
    if( !_parseJSON( json, dict ))
        return false;

    if( dict.isMember( "eventLow" ))
        std::cout << "eventLow" << ':' << dict[ "eventLow" ].toStyledString() << std::endl;
    if( dict.isMember( "eventHigh" ))
        std::cout << "eventHigh" << ':' << dict[ "eventHigh" ].toStyledString() << std::endl;
    return true;
}

template< class Alloc >
RequestBase< Alloc >::RequestBase()
    : zerobuf::Zerobuf( new Alloc( 20, 0 ))
{}


template< class Alloc >
RequestBase< Alloc >::RequestBase( const RequestBase& from )
    : zerobuf::Zerobuf( new Alloc( *static_cast< const Alloc* >( from.getAllocator( ))))
{}

template< class Alloc >
RequestBase< Alloc >& RequestBase< Alloc >::operator = ( const RequestBase& rhs )
{
    ::zerobuf::Zerobuf::operator = ( rhs );
    return *this;
}


template class RequestBase< ::zerobuf::NonMovingAllocator >;
}
}
