// Generated by zerobufCxx.py
#pragma once
#include <zerobuf/ConstVector.h>
#include <zerobuf/NonMovingAllocator.h>
#include <zerobuf/Vector.h>
#include <zerobuf/Zerobuf.h>

namespace zeq
{
namespace vocabulary
{
template< class Alloc = zerobuf::NonMovingAllocator >
class ExitBase : public zerobuf::Zerobuf
{
public:
    bool readJSON( const std::string& json );

    ExitBase() : Zerobuf() {}
    ExitBase( const ExitBase& ) : Zerobuf() {}
    virtual ~ExitBase() {}

    ExitBase& operator = ( const ExitBase& ) { return *this; }
    static bool isEmptyZerobuf() { return true; }
    static bool isStaticZerobuf() { return true; }

    virtual servus::uint128_t getZerobufType() const
    { return servus::uint128_t( 0x2a5eb6a646c0ffebull, 0x17f7db03e325a7beull ); }

private:
};

typedef ExitBase< ::zerobuf::NonMovingAllocator > Exit;

}
}
