// Generated by zerobufCxx.py
#pragma once
#include <zerobuf/ConstVector.h>
#include <zerobuf/NonMovingAllocator.h>
#include <zerobuf/Vector.h>
#include <zerobuf/Zerobuf.h>

namespace zeq
{
namespace vocabulary
{
template< class Alloc = zerobuf::NonMovingAllocator >
class RequestBase : public zerobuf::Zerobuf
{
public:
    uint64_t getEventLow() const;
    void setEventLow( uint64_t value );

    uint64_t getEventHigh() const;
    void setEventHigh( uint64_t value );

    bool readJSON( const std::string& json );

    RequestBase();
    RequestBase( const RequestBase& from );
    virtual ~RequestBase() {}

    RequestBase< Alloc >& operator = ( const RequestBase& rhs );
    static bool isEmptyZerobuf() { return false; }
    static bool isStaticZerobuf() { return true; }

    virtual servus::uint128_t getZerobufType() const
    { return servus::uint128_t( 0xc16d865f873633e7ull, 0x68996d5565c1aeadull ); }

private:
};

typedef RequestBase< ::zerobuf::NonMovingAllocator > Request;

}
}
