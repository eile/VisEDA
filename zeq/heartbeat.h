// Generated by zerobufCxx.py
#pragma once
#include <zerobuf/ConstVector.h>
#include <zerobuf/NonMovingAllocator.h>
#include <zerobuf/Vector.h>
#include <zerobuf/Zerobuf.h>

namespace zeq
{
namespace vocabulary
{
template< class Alloc = zerobuf::NonMovingAllocator >
class HeartbeatBase : public zerobuf::Zerobuf
{
public:
    bool readJSON( const std::string& json );

    HeartbeatBase() : Zerobuf() {}
    HeartbeatBase( const HeartbeatBase& ) : Zerobuf() {}
    virtual ~HeartbeatBase() {}

    HeartbeatBase& operator = ( const HeartbeatBase& ) { return *this; }
    static bool isEmptyZerobuf() { return true; }
    static bool isStaticZerobuf() { return true; }

    virtual servus::uint128_t getZerobufType() const
    { return servus::uint128_t( 0x443ec9baeb874fe4ull, 0x5c091a566d34add4ull ); }

private:
};

typedef HeartbeatBase< ::zerobuf::NonMovingAllocator > Heartbeat;

}
}
