// Generated by zerobufCxx.py
#include "echo.h"
#include <zerobuf/jsoncpp/json/json.h>
#include <iostream>

namespace zeq
{
namespace vocabulary
{
template< class Alloc >
typename EchoBase< Alloc >::Message EchoBase< Alloc >::getMessage()
{
    return Message( getAllocator( ));
}

template< class Alloc >
typename EchoBase< Alloc >::ConstMessage EchoBase< Alloc >::getMessage() const
{
    return ConstMessage( getAllocator( ));
}

template< class Alloc >
void EchoBase< Alloc >::setMessage( char const * value, size_t size )
{
    _setZerobufArray( value, size * sizeof( char ), 0 );
}

template< class Alloc >
std::string EchoBase< Alloc >::getMessageString() const
{
    const uint8_t* ptr = getAllocator()->template getDynamic< const uint8_t >( 0 );
    return std::string( ptr, ptr + getAllocator()->template getItem< uint64_t >( 12 ));
}

template< class Alloc >
void EchoBase< Alloc >::setMessage( const std::string& value )
{
    _setZerobufArray( value.c_str(), value.length(), 0 );
}


template< class Alloc >
bool EchoBase< Alloc >::readJSON( const std::string& json )
{
    Json::Value dict;
    if( !_parseJSON( json, dict ))
        return false;

    if( dict.isMember( "message" ))
        std::cout << "message" << ':' << dict[ "message" ].toStyledString() << std::endl;
    return true;
}

template< class Alloc >
EchoBase< Alloc >::EchoBase()
    : zerobuf::Zerobuf( new Alloc( 20, 1 ))
{}


template< class Alloc >
EchoBase< Alloc >::EchoBase( const EchoBase& from )
    : zerobuf::Zerobuf( new Alloc( *static_cast< const Alloc* >( from.getAllocator( ))))
{}

template< class Alloc >
EchoBase< Alloc >& EchoBase< Alloc >::operator = ( const EchoBase& rhs )
{
    ::zerobuf::Zerobuf::operator = ( rhs );
    return *this;
}

template< class Alloc >
template< class T > void EchoBase< Alloc >::_setZerobufArray( const T* data, const size_t size, const size_t arrayNum )
{
    void* array = getAllocator()->updateAllocation( arrayNum, size );
    ::memcpy( array, data, size );
}


template class EchoBase< ::zerobuf::NonMovingAllocator >;
}
}
