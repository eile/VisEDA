// Generated by zerobufCxx.py
#include "lookupTable1D.h"
#include <zerobuf/jsoncpp/json/json.h>
#include <iostream>

namespace zeq
{
namespace hbp
{
template< class Alloc >
uint8_t* LookupTable1DBase< Alloc >::getLut()
{
    return getAllocator()->template getItemPtr< uint8_t >( 4 );
}

template< class Alloc >
const uint8_t* LookupTable1DBase< Alloc >::getLut() const
{
    return getAllocator()->template getItemPtr< uint8_t >( 4 );
}

template< class Alloc >
std::vector< uint8_t> LookupTable1DBase< Alloc >::getLutVector() const
{
    const uint8_t* ptr = getAllocator()->template getItemPtr< uint8_t >( 4 );
    return std::vector< uint8_t >( ptr, ptr + 1024 );
}

template< class Alloc >
void LookupTable1DBase< Alloc >::setLut( uint8_t value[ 1024 ] )
{
    ::memcpy( getAllocator()->template getItemPtr< uint8_t >( 4 ), value, 1024 * sizeof( uint8_t ));
}

template< class Alloc >
void LookupTable1DBase< Alloc >::setLut( const std::vector< uint8_t >& value )
{
    if( 1024 >= value.size( ))
        ::memcpy( getAllocator()->template getItemPtr<uint8_t>( 4 ), value.data(), value.size() * sizeof( uint8_t));
}

template< class Alloc >
void LookupTable1DBase< Alloc >::setLut( const std::string& value )
{
    if( 1024 >= value.length( ))
        ::memcpy( getAllocator()->template getItemPtr<uint8_t>( 4 ), value.data(), value.length( ));
}


template< class Alloc >
bool LookupTable1DBase< Alloc >::readJSON( const std::string& json )
{
    Json::Value dict;
    if( !_parseJSON( json, dict ))
        return false;

    if( dict.isMember( "lut" ))
        std::cout << "lut" << ':' << dict[ "lut" ].toStyledString() << std::endl;
    return true;
}

template< class Alloc >
LookupTable1DBase< Alloc >::LookupTable1DBase()
    : zerobuf::Zerobuf( new Alloc( 1028, 0 ))
{}


template< class Alloc >
LookupTable1DBase< Alloc >::LookupTable1DBase( const LookupTable1DBase& from )
    : zerobuf::Zerobuf( new Alloc( *static_cast< const Alloc* >( from.getAllocator( ))))
{}

template< class Alloc >
LookupTable1DBase< Alloc >& LookupTable1DBase< Alloc >::operator = ( const LookupTable1DBase& rhs )
{
    ::zerobuf::Zerobuf::operator = ( rhs );
    return *this;
}


template class LookupTable1DBase< ::zerobuf::NonMovingAllocator >;
}
}
