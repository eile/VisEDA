
/* Copyright (c) 2014, Human Brain Project
 *                     Daniel Nachbaur <daniel.nachbaur@epfl.ch>
 *                     Juan Hernando <jhernando@fi.upm.es>
 */

#ifndef ZEQ_HBP_VOCABULARY_H
#define ZEQ_HBP_VOCABULARY_H

#include <zeq/types.h>
#include <zeq/api.h>

namespace zeq
{
namespace hbp
{

/** @group HBP messages */
//@{
static const uint128_t EVENT_CAMERA(
    lunchbox::make_uint128( "hbp::CameraEvent" ));
static const uint128_t EVENT_SELECTED_IDS(
    lunchbox::make_uint128( "hbp::SelectedIDsEvent" ));
static const uint128_t EVENT_TOGGLE_ID_REQUEST(
    lunchbox::make_uint128( "hbp::ToggleIDRequest" ));
//@}

/**
 * Serialize the given camera matrix into an Event of type EVENT_CAMERA.
 * The matrix to be serialized and sent to other instances is the one
 * used in the application to transform from world coordinate space into
 * camera space. Microns are assumed as unit and it has the BBP circuit
 * as reference.
 * @param matrix the 4x4 camera matrix in OpenGL data layout.
 * @return the serialized event.
 */
ZEQ_API Event serializeCamera( const std::vector< float >& matrix );

/**
 * Deserialize the given camera event into the 4x4 matrix.
 * The matrix received and deserialized is the one used in the application
 * to transform from world coordinate space into camera space.
 * Microns are assumed as unit and it has the BBP circuit as reference.
 * @param camera the camera event generated by serializeCamera().
 * @return the 4x4 camera matrix in OpenGL data layout.
 */
ZEQ_API std::vector< float > deserializeCamera( const Event& event );

/**
 * Serialize the given neuron selection into an Event of type
 * EVENT_SELECTED_IDS.
 * @param selection vector of neuron GIDs (uint).
 * @return the serialized event.
 */
ZEQ_API
Event serializeSelectedIDs( const std::vector< unsigned int >& ids );

/**
 * Deserialize the given neuron selection event into the vector of neuron GIDs.
 * @param event a selection event generated by serializeSelection().
 * @return the vector of neuron GIDs (uint).
 */
ZEQ_API
std::vector< unsigned int > deserializeSelectedIDs( const Event& event );

/**
 * Serialize the given selection into an Event of type EVENT_TOGGLE_ID_REQUEST.
 * @param ids vector of neuron GIDs (uint).
 * @return the serialized event.
 */
ZEQ_API
Event serializeToggleIDRequest( const std::vector< unsigned int >& ids );

/**
 * Deserialize an toggle selection request event into the vector of neuron GIDs.
 * @param event an event generated by serializeToggleIDRequest().
 * @return the vector of neuron GIDs (uint).
 */
ZEQ_API
std::vector< unsigned int > deserializeToggleIDRequest( const Event& event );

}
}
#endif
