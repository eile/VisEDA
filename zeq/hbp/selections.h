// Generated by zerobufCxx.py
#pragma once
#include <zerobuf/ConstVector.h>
#include <zerobuf/NonMovingAllocator.h>
#include <zerobuf/Vector.h>
#include <zerobuf/Zerobuf.h>

namespace zeq
{
namespace hbp
{
template< class Alloc = zerobuf::NonMovingAllocator >
class SelectedIDsBase : public zerobuf::Zerobuf
{
public:
    typedef ::zerobuf::Vector< uint32_t, 0 > Ids;
    typedef ::zerobuf::ConstVector< uint32_t, 0 > ConstIds;
    typename SelectedIDsBase< Alloc >::Ids getIds();
    typename SelectedIDsBase< Alloc >::ConstIds getIds() const;
    void setIds( uint32_t const * value, size_t size );
    std::string getIdsString() const;
    void setIds( const std::string& value );

    bool readJSON( const std::string& json );

    SelectedIDsBase();
    SelectedIDsBase( const SelectedIDsBase& from );
    virtual ~SelectedIDsBase() {}

    SelectedIDsBase< Alloc >& operator = ( const SelectedIDsBase& rhs );
    static bool isEmptyZerobuf() { return false; }
    static bool isStaticZerobuf() { return false; }

    virtual servus::uint128_t getZerobufType() const
    { return servus::uint128_t( 0x928003ad4c24459aull, 0x09145dd1eba325bcull ); }

private:
    template< class T > void _setZerobufArray( const T* data, const size_t size, const size_t arrayNum );
};

typedef SelectedIDsBase< ::zerobuf::NonMovingAllocator > SelectedIDs;

template< class Alloc = zerobuf::NonMovingAllocator >
class ToggleIDRequestBase : public zerobuf::Zerobuf
{
public:
    typedef ::zerobuf::Vector< uint32_t, 0 > Ids;
    typedef ::zerobuf::ConstVector< uint32_t, 0 > ConstIds;
    typename ToggleIDRequestBase< Alloc >::Ids getIds();
    typename ToggleIDRequestBase< Alloc >::ConstIds getIds() const;
    void setIds( uint32_t const * value, size_t size );
    std::string getIdsString() const;
    void setIds( const std::string& value );

    bool readJSON( const std::string& json );

    ToggleIDRequestBase();
    ToggleIDRequestBase( const ToggleIDRequestBase& from );
    virtual ~ToggleIDRequestBase() {}

    ToggleIDRequestBase< Alloc >& operator = ( const ToggleIDRequestBase& rhs );
    static bool isEmptyZerobuf() { return false; }
    static bool isStaticZerobuf() { return false; }

    virtual servus::uint128_t getZerobufType() const
    { return servus::uint128_t( 0x52ca3210a443998full, 0x922d78dac1b33bc5ull ); }

private:
    template< class T > void _setZerobufArray( const T* data, const size_t size, const size_t arrayNum );
};

typedef ToggleIDRequestBase< ::zerobuf::NonMovingAllocator > ToggleIDRequest;

}
}
